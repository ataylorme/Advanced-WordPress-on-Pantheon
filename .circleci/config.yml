# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
defaults: &defaults
  docker:
    - image: ataylorme/docker-php-advanced-wordpress-on-pantheon:latest
  working_directory: ~/Advanced-WordPress-on-Pantheon
  environment:
    #=========================================================================
    # In addition to the environment variables defined in this file, also
    # add the following variables in the Circle CI UI.
    #
    # See: https://circleci.com/docs/2.0/environment-variables/
    #
    # TERMINUS_SITE:  Name of the Pantheon site to run tests on, e.g. my_site
    # TERMINUS_TOKEN: The Pantheon machine token
    # GITHUB_TOKEN:   The GitHub personal access token
    # GIT_EMAIL:      The email address to use when making commits
    #
    # TEST_SITE_NAME: The name of the test site to provide when installing.
    # ADMIN_PASSWORD: The admin password to use when installing.
    # ADMIN_EMAIL:    The email address to give the admin when installing.
    #=========================================================================
    TZ: "/usr/share/zoneinfo/America/Los_Angeles"

    # The variables below usually do not need to be modified.
    
    #======================================================================================================================================
    # Circle CI 2.0 does not yet expand environment variables so they have to be manually EXPORTed
    # Once environment variables can be expanded the variables below can be uncommented and the EXPORTs in set-up-globals.sh can be removed
    # See: https://discuss.circleci.com/t/unclear-how-to-work-with-user-variables-circleci-provided-env-variables/12810/11
    # See: https://discuss.circleci.com/t/environment-variable-expansion-in-working-directory/11322
    # See: https://discuss.circleci.com/t/circle-2-0-global-environment-variables/8681
    #======================================================================================================================================
    # See set-up-globals.sh for more environment variables
    
    NOTIFY: 'scripts/github/add-commit-comment {project} {sha} "Created multidev environment [{site}#{env}]({dashboard-url})." {site-url}'
    ADMIN_USERNAME: admin
    BUILD_TOOLS_VERSION: dev-master
    TERM: dumb

version: 2
jobs:
    # @todo: common initialization, maybe
    install_dev_dependencies:
        <<: *defaults
        steps:
            - checkout

            - restore_cache:
                keys:
                    - composer-cache
                    - terminus-install

            - run:
                name: declare environment variables
                command: ./.circleci/set-up-globals.sh

            - run:
                name: configure Composer/Terminus
                command: ./.circleci/set-terminus-composer.sh

            - run:
                name: install dev dependencies
                command: composer install --no-ansi --no-interaction --optimize-autoloader --no-progress

            - save_cache:
                key: composer-cache
                paths:
                    - $HOME/.composer/cache

            - save_cache:
                key: terminus-install
                paths:
                    - $HOME/.terminus
                    - $HOME/terminus

            - persist_to_workspace:
                # Must be relative path from working_directory
                root: .
                # Must be relative path from root
                paths:
                    - vendor

    code_sniff_unit_test:
        <<: *defaults
        steps:
            - checkout

            - attach_workspace:
                # Must be absolute path or relative path from working_directory
                at: /tmp

            - run:
                name: copy vendor
                command: cp -r /tmp/vendor .

            - run:
                name: check for WordPress coding standards
                command: composer -n code-sniff
            
            - run:
                name: run unit tests
                command: composer -n unit-test

    build:
        <<: *defaults
        docker:
          - image: ataylorme/docker-node-advanced-wordpress-on-pantheon:js-task-runners
        steps:
            - checkout

            - restore_cache:
                keys:
                    - twentyseventeen-child-theme

            - run:
                name: build gulp assets
                command: ./.circleci/build-gulp-assets.sh

            - save_cache:
                key: twentyseventeen-child-theme
                paths:
                    - $HOME/Advanced-WordPress-on-Pantheon/web/wp-content/themes/twentyseventeen-child/node_modules

            - persist_to_workspace:
                # Must be relative path from working_directory
                root: .
                # Must be relative path from root
                paths:
                    - web
    
    build_php_and_deploy_to_pantheon:
        <<: *defaults
        steps:
            - checkout

            - attach_workspace:
                # Must be absolute path or relative path from working_directory
                at: /tmp

            - restore_cache:
                keys:
                    - composer-cache
                    - terminus-install

            - run:
                name: declare environment variables
                command: ./.circleci/set-up-globals.sh

            - run:
                name: configure Composer/Terminus
                command: ./.circleci/set-terminus-composer.sh

            - run:
                name: build Composer assets
                command: composer -n build-assets

            - run:
                name: copy production assets
                command: rsync -vaz --exclude='.git' --exclude='node_modules' /tmp/web/* ./web

            - run:
                name: deploy to Pantheon
                command: ./.circleci/deploy-to-pantheon.sh
                no_output_timeout: 30m

    behat_test:
        <<: *defaults
        steps:
            - checkout

            - attach_workspace:
                # Must be absolute path or relative path from working_directory
                at: /tmp

            - restore_cache:
                keys:
                    - terminus-install

            - run:
                name: copy vendor
                command: cp -r /tmp/vendor ./vendor
            
            - run:
                name: declare environment variables
                command: ./.circleci/set-up-globals.sh

            - run:
                name: configure Composer/Terminus
                command: ./.circleci/set-terminus-composer.sh

            - run:
                name: run Behat tests
                command: ./.circleci/behat-test.sh
                no_output_timeout: 30m
    
    visual_regression_test:
        <<: *defaults
        docker:
          - image: ataylorme/docker-node-advanced-wordpress-on-pantheon:backstop-js
        steps:
            - checkout
            
            - run:
                name: declare environment variables
                command: ./.circleci/set-up-globals.sh

            - run:
                name: visual regression test
                command: ./.circleci/visual-regression-test.sh

            - store_artifacts:
                path: /tmp/artifacts
                destination: artifacts

    lighthouse_performance_test:
        <<: *defaults
        docker:
          - image: ataylorme/docker-node-advanced-wordpress-on-pantheon:lighthouse
        steps:
            - checkout
            
            - run:
                name: declare environment variables
                command: ./.circleci/set-up-globals.sh

            - run:
                name: lighthouse test
                command: ./.circleci/lighthouse-performance-test.sh

            - store_artifacts:
                path: /tmp/artifacts
                destination: artifacts

workflows:
  version: 2
  build_and_test:
    jobs:
      # Install dev dependencies needed for testing
      - install_dev_dependencies
      # Build production assets with node
      - build
      # Deploy to Pantheon requires the site being built
      - build_php_and_deploy_to_pantheon:
            requires:
                - build
      # Code sniff and unit test first
      - code_sniff_unit_test:
            requires:
                - install_dev_dependencies
      # Run Lighthouse test after deploy so it can be done on Pantheon
      - lighthouse_performance_test:
            requires:
                - build_php_and_deploy_to_pantheon
      # Run visual regression test after deploy so it can be done on Pantheon
      - visual_regression_test:
            requires:
                - build_php_and_deploy_to_pantheon
      # Run Behat tests after Visual Regression so the changes Behat makes don't mess with screenshots
      - behat_test:
            requires:
                - install_dev_dependencies
                - build_php_and_deploy_to_pantheon
                - visual_regression_test
                - lighthouse_performance_test
